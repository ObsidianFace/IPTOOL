#!/bin/bash
MAIN() {
clear
echo "==============================================================================="
echo "|                                                                             |"
echo "|Choose an option from the following menu:                                    |"
echo "|1) Check for computers on the local network using ARP                        |"
echo "|2) Check for a computer via IPv4 Address                                     |"
echo "|3) Check an IPv4 Range for computers                                         |"
echo "|4) Exit                                                                      |"
echo "|                                                                             |"
echo "==============================================================================="
echo " Selection Number    :" 
read -n 1 -s -r NUMBER
case $NUMBER in
	1)
	ARPSCAN
	MAIN
	;;

	2)
	PING1
	MAIN
	;;

	3)
	PINGRNG
	;;

	4)
	EXITCODE
	;;

	*)
	echo "That was not a valid choice. Please Try Harder..."
	read -n 1 -s -r -p "Push any key to continue"
	MAIN
	;;
esac
}
EXITCODE()  {
clear
echo "Would you like to see a list of targets found?"
read -n 1 -s -r -p "Yes or No: " END
case $END in
	[yY] )
	clear
	cat subscripts/targets | sort -V | uniq
	read -n 1 -s -r -p "Press any key to exit"
	clear
	exit
	;;
	[nN] )
	clear
	exit
	;;
	*)
	clear
	echo "That was not a valid choice"
	read -n 1 -s -r -p "Press any key to try again"
	EXITCODE
	;;
esac
read -n 1 -s -r -p "Push any key to exit program"
clear
exit
}
ARPSCAN() {
IPlist=$(sudo arp-scan -l | sed '1,2d' | sed '$d' | sed '$d' | sed '$d' | awk '{print$1}' > /home/kali/Desktop/ARPing.txt)
date

echo "Scanning IPs"
cat /home/kali/Desktop/ARPing.txt | while read output
do
    ping -c 1 "$output" > /dev/null
    if [ $? -eq 0 ]; then
    echo "node $output is up"
    else
    echo "node $output is down"
    fi
done
echo "Local Network Scan Complete"
read -n 1 -s -r -p "Push any key to continue"
MAIN
}

PING1() {
DWN=0       
echo "Enter Valid Class C IP Address"
read IP 
if [[ $IP =~ ^(19[2-9]|2[0-1][0-9]|22[0-3])(\.([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$ ]]
then echo "IP Is A Valid Class C IP Address...Commencing Scan"
ping -q -c 1 $IP > IPSHEET
PL=$(awk '/received/ {print $4}' IPSHEET)
if [ "$PL" = "$DWN" ]
then echo "$IP is down"
else echo "$IP is up"
fi
else echo "That IP Was Not A Valid Class C IP....Try Harder"
fi
echo "Single IP scan complete"
read -n 1 -s -r -p "Push any key to continue"
MAIN
}

PINGRNG () {
main(){
echo "input first octet" 
read f
echo "input second octet"
read g
echo "input third octet"
read h
if [ $f -le 225 ]
then echo "."
else echo "octet 1 bad" && 
main
fi
if [ $f -ge 192 ]
then echo ".."
else echo "octet 1 bad" && 
main
fi 
if [ $g -le 255 ]
then echo "..."
else echo "octet 2 bad" && 
main
fi
if [ $g -ge 0 ]
then echo "...."
else echo "octet 2 bad" && 
main
fi 
if [ $h -le 255 ]
then echo "....."
else echo "octet 3 bad" && 
main
fi
if [ $h -ge 0 ]
then echo "......"
else echo "octet 3 bad" && 
main
fi
for i in {1..254} do;
{
(ping -c 3 -l 3 -W 0.2 $f.$g.$h.$i) &>/dev/null && echo "$f.$g.$h.$i is up"
}
}
main
echo "Range IP Scan complete"
read -n 1 -s -r -p "Push any key to continue"
MAIN
}

#Start of Script
echo "" > subscripts/targets
MAIN
